Razonamiento: Para resolver el problema, necesitamos analizar el número total de cajas y luego identificar la capa segura para comenzar el apilamiento. **Tiempo total de trabajo**: sabemos que una solo una caja que cogeira no tuviera otra encina en ese momento. Necesitamos calcular el tiempo total que necesitamos para apilar las cajas sin tocar las que estén encima de otra caja. Según nuestro problema, el tiempo total de trabajo es 14 si se trata de una secuencia descendente y 19 si se trata de una secuencia ascendente. Es decir, el tiempo total para el apilamiento será 14 más 14, lo que equivale a 28. Para cada una de los caminos posibles que se nos proporcionan: *   **Camino A:** Dado que la caja D no tiene la caja encima, bien podemos comenzar por D. Sin embargo, las cajas E y B comienzan a ascender y comienzan encimando y debemos esperar. Solo pueden trabajar las cajas A y E al final, sin causar inmovilización. Por lo tanto, nuestro tiempo total de puramente correctamente ascendente de D es: D: 7, C: 2, B: 4, E: 2, A: 8 → No cumple con las condiciones. Por tanto, no es correcto. *   **Camino B:** Sabemos lo que sucede con la caja E: debemos esperar otra caja en la que se apoye y luego recoger la siguiente. Este camino no cumple con las condiciones. Por tanto, no es correcto. *   **Camino C:** Si recogermosrecommended la caja B después de mover la caja C y A derivarán un resultado de mayor tiempo de espera. Esta opción no es óptima. Por tanto, no es correcto. *   **Camino D:** Hay una tercera forma posible de evitar el tiempo de espera alimentando las cajas. Este camino demuestra la estructura que se asemeja al problema original. El resultado es un número de días formado por apilar las cajas de ejecutable ascendente de 10,: 10: 2, 9: 

Respuesta: No Answer